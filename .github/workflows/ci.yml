name: CI

on: [push, pull_request]

jobs:
  client_build:
    name: Client / Build (Compile TypeScript)
    runs-on: ubuntu-latest
    env:
      working-directory: ./client
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-node-modules-${{ hashFiles('client/package-lock.json') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ${{ env.working-directory }}
      - run: ./build_client.sh
        working-directory: ${{ env.working-directory }}

  client_lint:
    name: Client / Lint (ESLint)
    runs-on: ubuntu-latest
    env:
      working-directory: ./client
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-node-modules-${{ hashFiles('client/package-lock.json') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ${{ env.working-directory }}
      - run: ./set_version.sh
        working-directory: ${{ env.working-directory }}
      - run: ./lint_client.sh
        working-directory: ${{ env.working-directory }}

  client_test:
    name: Client / Test (Jest)
    runs-on: ubuntu-latest
    env:
      working-directory: ./client
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-node-modules-${{ hashFiles('client/package-lock.json') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ${{ env.working-directory }}
      - run: ./set_version.sh
        working-directory: ${{ env.working-directory }}
      - run: npm run test
        working-directory: ${{ env.working-directory }}

  server_build:
    name: Server / Build (Compile Go)
    runs-on: ubuntu-latest
    env:
      working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - run: ./build_server.sh
        working-directory: ${{ env.working-directory }}

  server_lint:
    name: Server / Lint (golangci-lint)
    runs-on: ubuntu-latest
    env:
      working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - uses: golangci/golangci-lint-action@v2
        with:
          version: v1.33
          working-directory: ${{ env.working-directory }}/src

  spell_check:
    name: Spell Check
    runs-on: ubuntu-latest
    env:
      working-directory: ./spell_check
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: spell-check-node-modules-${{ hashFiles('spell_check/package-lock.json') }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ${{ env.working-directory }}
      - run: ./spell_check.sh
        working-directory: ${{ env.working-directory }}

  discord:
    name: Discord Failure Notification
    needs: [client_build, client_lint, client_test, server_build, server_lint, spell_check]
    if: always() # This is needed to always run this job, even if the other jobs fail
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - if: env.WORKFLOW_CONCLUSION != 'success' && env.WORKFLOW_CONCLUSION != 'cancelled'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ env.WORKFLOW_CONCLUSION }}
          title: ""
