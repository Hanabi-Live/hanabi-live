name: CI

on: [push, pull_request]

jobs:
  check_client:
    name: Check changed Client files
    outputs:
      client_files: ${{ steps.check_files_client.outputs.client_files }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: check files
        id: check_files_client
        run: |
          echo "=============== list changed files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of changed files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != "client/"* ]]; then
              echo "This file is not under the directory 'client'."
              echo "::set-output name=client_files::false"
              break
            else
              echo "::set-output name=client_files::true"
            fi
          done < files.txt

  check_server:
    name: Check changed Server files
    outputs:
      server_files: ${{ steps.check_files_server.outputs.server_files }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: check files
        id: check_files_server
        run: |
          echo "=============== list changed files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of changed files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != "server/"* ]]; then
              echo "This file is not under the directory 'server'."
              echo "::set-output name=server_files::false"
              break
            else
              echo "::set-output name=server_files::true"
            fi
          done < files.txt

  client_build:
    name: Client / Build (Compile TypeScript)
    needs: check_client
    if: needs.check_client.outputs.client_files == 'true'
    runs-on: ubuntu-latest
    env:
      working-directory: ./client
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          # The default version is 14
          # The ESLint config requires Node 16 to work properly
          node-version: "16"

      - name: Retrieve the cached "node_modules" directory (if present)
        uses: actions/cache@v2
        id: client-build-cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-build-node-modules-${{ hashFiles('client/package-lock.json') }}

      - name: Install dependencies (if the cached directory was not found)
        if: steps.client-build-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ env.working-directory }}

      - name: Build the TypeScript code
        run: ./build_client.sh
        working-directory: ${{ env.working-directory }}

  client_lint:
    name: Client / Lint (ESLint)
    needs: check_client
    if: needs.check_client.outputs.client_files == 'true'
    runs-on: ubuntu-latest
    env:
      working-directory: ./client
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          # The default version is 14
          # The ESLint config requires Node 16 to work properly
          node-version: "16"

      - name: Retrieve the cached "node_modules" directory (if present)
        uses: actions/cache@v2
        id: client-lint-cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-lint-node-modules-${{ hashFiles('client/package-lock.json') }}

      - name: Install dependencies (if the cached directory was not found)
        if: steps.client-lint-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ env.working-directory }}

      - name: Create the "version.json" file
        run: ./set_version.sh
        working-directory: ${{ env.working-directory }}

      - name: Lint the TypeScript code
        run: ./lint_client.sh
        working-directory: ${{ env.working-directory }}

  client_test:
    name: Client / Test (Jest)
    needs: check_client
    if: needs.check_client.outputs.client_files == 'true'
    runs-on: ubuntu-latest
    env:
      working-directory: ./client
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          # The default version is 14
          # The ESLint config requires Node 16 to work properly
          node-version: "16"

      - name: Retrieve the cached "node_modules" directory (if present)
        uses: actions/cache@v2
        id: client-test-cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: client-test-node-modules-${{ hashFiles('client/package-lock.json') }}

      - name: Install dependencies (if the cached directory was not found)
        if: steps.client-test-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ env.working-directory }}

      - name: Create the "version.json" file
        run: ./set_version.sh
        working-directory: ${{ env.working-directory }}

      - name: Test the TypeScript code
        run: npm run test
        working-directory: ${{ env.working-directory }}

  server_build:
    name: Server / Build (Compile Go)
    needs: check_server
    if: needs.check_server.outputs.server_files == 'true'
    runs-on: ubuntu-latest
    env:
      working-directory: ./server
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Install Golang
        uses: actions/setup-go@v2

      - name: Compile the Golang code
        run: ./build_server.sh
        working-directory: ${{ env.working-directory }}

  server_lint:
    name: Server / Lint (golangci-lint)
    needs: check_server
    if: needs.check_server.outputs.server_files == 'true'
    runs-on: ubuntu-latest
    env:
      working-directory: ./server
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Install Golang
        uses: actions/setup-go@v2

      - name: Lint the Golang code
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.33
          working-directory: ${{ env.working-directory }}/src

  spell_check:
    name: Spell Check
    runs-on: ubuntu-latest
    env:
      working-directory: ./spell_check
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          # The default version is 14
          # The ESLint config requires Node 16 to work properly
          node-version: "16"

      - name: Retrieve the cached "node_modules" directory (if present)
        uses: actions/cache@v2
        id: spell-check-cache
        with:
          path: ${{ env.working-directory }}/node_modules
          key: spell-check-node-modules-${{ hashFiles('spell_check/package-lock.json') }}

      - name: Install dependencies (if the cached directory was not found)
        if: steps.spell-check-cache.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ env.working-directory }}

      - name: Spell check both client and server code
        run: ./spell_check.sh
        working-directory: ${{ env.working-directory }}

  discord:
    name: Discord Failure Notification
    needs:
      [
        client_build,
        client_lint,
        client_test,
        server_build,
        server_lint,
        spell_check,
      ]
    if: always() # This is needed to always run this job, even if the other jobs fail
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - if: env.WORKFLOW_CONCLUSION != 'success' && env.WORKFLOW_CONCLUSION != 'cancelled'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ env.WORKFLOW_CONCLUSION }}
          title: ""
