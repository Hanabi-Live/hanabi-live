{{define "content"}}
<style>
  th:hover {
    background-color: rgb(220, 220, 220);
    cursor: pointer;
  }
</style>

<div id="page-wrapper">

  <!-- Header -->
  <header id="header">
    <h1>{{ template "logo" }}</h1>
    <nav id="nav"></nav>
  </header>

  <!-- Main -->
  <section id="main" class="container max history-page">
    <header>
      <h2><img src="/public/img/logos/header.svg" width="259"></h2>
    </header>
    <div class="row uniform 100%">
      <div class="col-12">
        <section class="box">
          <h2 class="align-center">
            {{if .NamesTitle}}
              {{.NamesTitle}}
            {{else}}
              {{.Name}}'s Profile
            {{end}}
          </h2>

          {{if not .NamesTitle}}
          <div>
            <ul class="actions fit" id="profile-buttons">
              <li>
                <a class="button fit icon fa-chart-area{{if eq .Title "Scores"}} disabled{{else}}" href="/scores/{{.Name}}{{end}}">
                  Scores & Statistics
                </a>
              </li>
              <li>
                <a class="button fit icon fa-history{{if eq .Title "History"}} disabled{{else}}" href="/history/{{.Name}}{{end}}">
                  Full Game History
                </a>
              </li>
              <li>
                <a class="button fit icon fa-question{{if eq .Title "Missing Scores"}} disabled{{else}}" href="/missing-scores/{{.Name}}{{end}}">
                  Missing Scores
                </a>
              </li>
              <li>
                <a class="button fit icon fa-tag{{if eq .Title "Tagged Games"}} disabled{{else}}" href="/tags/{{.Name}}{{end}}">
                  Tagged Games
                </a>
              </li>
            </ul>
          </div>
          {{end}}

          {{template "profile" .}}
        </section>
      </div>
    </div>
  </section>
</div>

<!-- Tooltips -->
<div class="hidden">
  <div id="modifier-deckplays" class="profile-tooltip">
    This score is not legitimate since the <strong>Bottom-Deck Blind-Play</strong> option was used.
  </div>
  <div id="modifier-emptyclues" class="profile-tooltip">
    This score is not legitimate since the <strong>Empty Clue</strong> option was used.
  </div>
  <div id="modifier-oneextracard" class="profile-tooltip">
    This score is not legitimate since the <strong>One Extra Card</strong> option was used.
  </div>
  <div id="modifier-onelesscard" class="profile-tooltip">
    This score is not legitimate since the <strong>One Less Card</strong> option was used.
  </div>
  <div id="modifier-allornothing" class="profile-tooltip">
    This score is not legitimate since the <strong>All or Nothing</strong> option was used.
  </div>
</div>

<script type="text/javascript" src="/public/js/lib/jquery-3.5.0.min.js"></script>
<script type="text/javascript" src="/public/js/lib/jquery.tablesorter-2.31.3.min.js"></script>
<script type="text/javascript" src="/public/js/lib/jquery.tablesorter.pager-2.31.3.min.js"></script>
<script type="text/javascript" src="/public/js/lib/widget-filter-2.30.0.min.js"></script>
<script type="text/javascript" src="/public/js/lib/tooltipster.bundle.min.js"></script>
<script type="text/javascript">
  $(document).ready(() => {
    // Initialize the tooltips
    $('.tooltip').tooltipster({
      animation: 'grow',
      contentAsHTML: true,
      delay: 0,
      theme: [
        'tooltipster-shadow',
        'tooltipster-shadow-big',
      ],
    });
    const pagerOptions = {
      // target the pager markup - see the HTML block below
      container: $(".pager"),
      // output string - default is '{page}/{totalPages}';
      // possible variables: {size}, {page}, {totalPages}, {filteredPages}, {startRow}, {endRow}, {filteredRows} and {totalRows}
      // also {page:input} & {startRow:input} will add a modifiable input in place of the value
      output: '{startRow} - {endRow} / {filteredRows} ({totalRows})',
      // if true, the table will remain the same height no matter how many records are displayed. The space is made up by an empty
      // table row set to a height to compensate; default is false
      fixedHeight: true,
      // remove rows from the table to speed up the sort of large tables.
      // setting this to false, only hides the non-visible rows; needed if you plan to add/remove rows with the pager enabled.
      removeRows: false,
      // go to page selector - select dropdown that sets the current page
      cssGoto: '.gotoPage'
    };
    // Add parser for date and time column to enable sorting
    // https://mottie.github.io/tablesorter/docs/example-parsers.html
    $.tablesorter.addParser({
      id: 'date-and-time', // matches all table header cells with class "sorter-date-and-time"
      is: function (s, table, cell, $cell) {
        // return false so this parser is not auto detected
        return false;
      },
      format: function (s, table, cell, cellIndex) {
        // s is the date and time string
        // format "YYYY-MM-DD — hh:mm:ss Z", e.g. "2021-03-14 — 16:33:05 UTC"
        // parsing the date and time string (regex), converting it to a date and then to unix timestamp/seconds
        try {
          const regexDateAndTime = new RegExp(`(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2}) — (?<hours>\\d{2}):(?<minutes>\\d{2}):(?<seconds>\\d{2})`);
          const d = regexDateAndTime.exec(s).groups;
          const time = (new Date(d.year, d.month - 1, d.day, d.hours, d.minutes, d.seconds)).getTime();
          return time;
        } catch {
          // date and time string was not in expected format
          return 0;
        }
      },
      type: 'numeric'
    });

    // Add parser for $currentScore / $maxScore column
    $.tablesorter.addParser({
      id: 'current-max-score', // matches all table header cells with class "sorter-current-max-score"
      is: function (s, table, cell, $cell) {
        // return false so this parser is not auto detected
        return false;
      },
      format: function (s, table, cell, cellIndex) {
        try {
          // Expected s format: int / int &nbsp;[<i ...></i>]
          const [currentScore, maxScore] = s.split(" / ");
          if (maxScore == 0) {
            return 0;
          }
          return currentScore / maxScore;
        } catch {
          return 0;
        }
      },
      type: 'numeric'
    });

    // Add parser for average score
    $.tablesorter.addParser({
      id: 'average-score', // matches all table header cells with class "sorter-average-score"
      is: function (s, table, cell, $cell) {
        // return false so this parser is not auto detected
        return false;
      },
      format: function (s, table, cell, cellIndex) {
        try {
          // Expected s format: decimal
          if (s.trim() === '-') {
            return 0;
          }
          const average = parseFloat(s);
          return average;
        } catch {
          return 0;
        }
      },
      type: 'numeric'
    });

    // Initialize the table sorting
    $('table:not(.plain)').tablesorter({
      headers: {
{{if eq .Title "Scores"}}
        1: { filter: false },
        2: { filter: false },
        3: { filter: false },
        4: { filter: false },
        5: { filter: false },
        6: { filter: false },
        7: { filter: false },
        8: { filter: false },
{{else if eq .Title "Missing Scores"}}
        0: { filter: false },
        1: { filter: false },
        2: { filter: false },
{{else if eq .Title "Tagged Games"}}
        0: { filter: false },
        1: { filter: false },
        2: { filter: false },
        3: { filter: false },
        4: { filter: false },
        5: { filter: false },
        6: { filter: false },
        7: { filter: false },
{{else}}
        0: { filter: true },
        1: { filter: true },
        2: { filter: true },
        3: { filter: true },
        4: { filter: false },
        5: { filter: true },
        6: { filter: false },
{{end}}
      },
      widgets: ['zebra', 'filter'],
      // Filter options
      // From https://mottie.github.io/tablesorter/docs/example-widget-filter.html
      widgetOptions: {
        filter_cssFilter   : '',
        filter_childRows   : false,
        filter_hideFilters : false,
        filter_ignoreCase  : true,
        filter_reset : '',
        filter_saveFilters : true,
        filter_searchDelay : 300,
        filter_startsWith  : false,
        filter_functions : {
        }
      }
    })

    // Bind to pager events
    // *********************
    .bind('pagerChange pagerComplete pagerInitialized pageMoved', function(e, c) {
      var msg = '"</span> event triggered, ' + (e.type === 'pagerChange' ? 'going to' : 'now on') +
        ' page <span class="typ">' + (c.page + 1) + '/' + c.totalPages + '</span>';
      $('#display')
        .append('<li><span class="str">"' + e.type + msg + '</li>')
        .find('li:first').remove();
    })

    .bind('filterEnd', () => { setRowColors() })

    // Initialize the pager plugin
    // ****************************
    .tablesorterPager(pagerOptions);

    initMissingScores();
  });

  const initMissingScores = () => {
    if (!window.location.pathname.startsWith('/missing-scores/')) {
      return;
    }

    // Parse the number of players from the URL
    // e.g. ["", "missing-scores", "Alice", "Bob"] from "/missing-scores/Alice/Bob"
    const urlSegments = window.location.pathname.split('/');
    if (urlSegments < 3) {
      return;
    }
    const playerName = urlSegments[2];
    let numPlayers = 0;
    if (urlSegments.length >= 4) {
      numPlayers = parseIntSafe(urlSegments[3]);
      if (numPlayers === NaN) {
        numPlayers = 0;
      }
    }

    // Initialize the "Filter by # of Players" dropdown
    if (numPlayers === 0) {
      $('#filter-by-players').val('-');
    } else {
      $('#filter-by-players').val(numPlayers.toString());
      $('#filter-by-players option[value="-"]').remove();
    }
    $('#filter-by-players').change(() => {
      const numPlayers = $('#filter-by-players').val();
      window.location = `/missing-scores/${playerName}/${numPlayers}`;
    });
  }

  // In the Alpha HTML5 template, table rows are supposed to alternate colors
  // After sorting, the color alternation will be messed up, so manually reset all of the row colors
  const setRowColors = () => {
    const selector = "table.history.tablesorter tbody tr:not(.filtered)";
    const numRows = $(selector).length;
    const color1 = '#f8f8f8';
    const color2 = 'white';
    for (let i = 0; i < numRows; i++) {
      const colorForThisRow = i % 2 == 0 ? color1 : color2;
      $(selector).eq(i).css('background-color', colorForThisRow);
    }
  }

  // Subroutines
  // The "parseIntSafe()" function is copied from "misc.ts"
  const parseIntSafe = (input) => {
    let trimmedInput = input.trim(); // Remove all leading and trailing whitespace
    const isNegativeNumber = trimmedInput.startsWith('-');
    if (isNegativeNumber) {
      // Remove the leading minus sign before we match the regular expression
      trimmedInput = trimmedInput.substring(1);
    }
    if (!trimmedInput.match(/^\d+$/)) { // "\d" matches any digit (same as "[0-9]")
      return NaN;
    }
    if (isNegativeNumber) {
      // Add the leading minus sign back
      trimmedInput = `-${trimmedInput}`;
    }
    return parseInt(trimmedInput, 10);
  };
</script>
{{end}}
