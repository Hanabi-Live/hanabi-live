# The name of the domain to use
# This must exactly match the URL that you connect to, or else the login cookie will not work
DOMAIN="localhost"

# A random 128 character alphanumeric string
# This is used to encrypt/decrypt the cookies
SESSION_SECRET="change_this_string"

# The port that the HTTP server will listen on
# If blank, it will default to 80 or 443, depending on whether a TLS certificate is specified
# This must not overlap with "LOCALHOST_PORT" or "WEBPACK_PORT"
PORT=

# The port that the WebPack development server will listen on
# If blank, it will default to 8080
# This must not overlap with "PORT" or "LOCALHOST_PORT"
WEBPACK_DEV_SERVER_PORT=

# The port that the localhost HTTP server will listen on
# If blank, it will default to 8081
# This must not overlap with "PORT" or "WEBPACK_PORT"
LOCALHOST_PORT=

# HTTPS (TLS) Configuration
# If blank, it will default to HTTP instead of using HTTPS
TLS_CERT_FILE=
TLS_KEY_FILE=

# The PostgreSQL database configuration
# If "DB_HOST" is blank, it will default to localhost
# If "DB_PORT" is blank, it will default to 5432 (the default PostgreSQL port)
DB_HOST=
DB_PORT=
DB_USER="hanabiuser"
DB_PASS="1234567890"
DB_NAME="hanabi"

# The Google Drive configuration (for automated database backups)
# If blank, it will skip backing up the database
# Additionally, make sure that the file associated with the service account exists on the file system
# e.g. "/root/.gdrive/hanabi-live-1234567890ab.json"
GOOGLE_DRIVE_SERVICE_ACCOUNT_FILENAME=
GOOGLE_DRIVE_PARENT_DIRECTORY_ID=

# The token from a Discord account used for the bot
# If blank, the Discord bot will not initialize
# https://github.com/reactiflux/discord-irc/wiki/Creating-a-discord-bot-&-getting-a-token
# https://discord.com/developers/applications
# The bot needs the following permissions:
# "Text Permissions - Send Messages" (2048)
# https://discord.com/oauth2/authorize?scope=bot&permissions=2048&client_id=YOUR_CLIENT_ID_HERE
DISCORD_TOKEN=
# A guild is the internal name for a server
DISCORD_GUILD_ID=
DISCORD_CHANNEL_SYNC_WITH_LOBBY=

# Information for GitHub repository automation
# If blank, GitHub functionality will not be used
# https://github.com/bradleyfalzon/ghinstallation#what-is-app-id-and-installation-id
# Create a new GitHub app with the following steps:
# 1) https://github.com/settings/apps
# 2) "New GitHub App"
# 3) Fill in "GitHub App name"
# 4) Under "Webhook", uncheck "Active"
# 5) Grant the necessary repository permissions
# 6) Click "Create GitHub App"
# 7) Click on the link for "Generate a private key"
# 8) Change the profile picture for the app
# 9) Install the app: https://github.com/settings/apps/APP_NAME/installations
# App ID can be found at:
# https://github.com/settings/apps/APP_NAME
GITHUB_APP_ID=
# Installation ID can be found by:
# 1) https://github.com/Zamiell/REPOSITORY_NAME/settings/installations
# 2) Click on "Configure" next to the app
# 3) The number in the URL is the installation ID
GITHUB_INSTALLATION_ID=

# A Google Analytics tracking ID
# If blank, the GA middleware will not be used
# https://analytics.google.com/
GA_TRACKING_ID=

# The Sentry client key (DSN) for the Golang project
# e.g. "https://<key>@sentry.io/<project>"
# If blank, Sentry will not initialize
# https://sentry.io/settings/hanabi-live/projects/hanabi-live-server/keys/
SENTRY_DSN=

# The Sentry specification for uploading JavaScript source-maps
# If blank, WebPack will not upload source-maps
# https://sentry.io/settings/hanabi-live/developer-settings/
SENTRY_AUTH_TOKEN=
SENTRY_ORG="hanabi-live"
SENTRY_PROJECT="hanabi-live-client"
